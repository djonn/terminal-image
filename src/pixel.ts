export type Pixel = {
  r: number;
  g: number;
  b: number;
  a: number;
};

export const rgb = (r: number, g: number, b: number): Pixel => {
  return { r, g, b, a: 255 };
};

export const subtract = (a: Pixel, b: Pixel): Pixel => {
  return {
    r: a.r - b.r,
    g: a.g - b.g,
    b: a.b - b.b,
    a: 255,
  };
};

export const add = (a: Pixel, b: Pixel): Pixel => {
  return {
    r: a.r + b.r,
    g: a.g + b.g,
    b: a.b + b.b,
    a: 255,
  };
};

export const multiply = (pixel: Pixel, factor: number): Pixel => {
  return {
    r: pixel.r * factor,
    g: pixel.g * factor,
    b: pixel.b * factor,
    a: 255,
  };
};

export const normalize = (pixel: Pixel): Pixel => {
  return Object.fromEntries(
    Object.entries(pixel).map(([key, value]) => [
      key,
      Math.min(255, Math.max(0, value)),
    ]),
  ) as Pixel;
};

export const findClosestColor = (pixel: Pixel, palette: Pixel[]): Pixel => {
  const euclideanDistance = (a: Pixel, b: Pixel) => {
    const redPart = (a.r - b.r) ** 2;
    const greenPart = (a.g - b.g) ** 2;
    const bluePart = (a.b - b.b) ** 2;

    return Math.sqrt(redPart + greenPart + bluePart);
  };

  return palette
    .map((p): [Pixel, number] => [p, euclideanDistance(pixel, p)])
    .reduce(
      (acc, cur) => {
        if (typeof acc === "undefined") return cur;
        return acc[1] <= cur[1] ? acc : cur;
      },
      [rgb(255, 255, 255), 10000],
    )[0];
};

export const XTERM_COLOR_PALETTE = [
  rgb(0, 0, 0),
  rgb(128, 0, 0),
  rgb(0, 128, 0),
  rgb(128, 128, 0),
  rgb(0, 0, 128),
  rgb(128, 0, 128),
  rgb(0, 128, 128),
  rgb(192, 192, 192),
  rgb(128, 128, 128),
  rgb(255, 0, 0),
  rgb(0, 255, 0),
  rgb(255, 255, 0),
  rgb(0, 0, 255),
  rgb(255, 0, 255),
  rgb(0, 255, 255),
  rgb(255, 255, 255),
  rgb(0, 0, 0),
  rgb(0, 0, 95),
  rgb(0, 0, 135),
  rgb(0, 0, 175),
  rgb(0, 0, 215),
  rgb(0, 0, 255),
  rgb(0, 95, 0),
  rgb(0, 95, 95),
  rgb(0, 95, 135),
  rgb(0, 95, 175),
  rgb(0, 95, 215),
  rgb(0, 95, 255),
  rgb(0, 135, 0),
  rgb(0, 135, 95),
  rgb(0, 135, 135),
  rgb(0, 135, 175),
  rgb(0, 135, 215),
  rgb(0, 135, 255),
  rgb(0, 175, 0),
  rgb(0, 175, 95),
  rgb(0, 175, 135),
  rgb(0, 175, 175),
  rgb(0, 175, 215),
  rgb(0, 175, 255),
  rgb(0, 215, 0),
  rgb(0, 215, 95),
  rgb(0, 215, 135),
  rgb(0, 215, 175),
  rgb(0, 215, 215),
  rgb(0, 215, 255),
  rgb(0, 255, 0),
  rgb(0, 255, 95),
  rgb(0, 255, 135),
  rgb(0, 255, 175),
  rgb(0, 255, 215),
  rgb(0, 255, 255),
  rgb(95, 0, 0),
  rgb(95, 0, 95),
  rgb(95, 0, 135),
  rgb(95, 0, 175),
  rgb(95, 0, 215),
  rgb(95, 0, 255),
  rgb(95, 95, 0),
  rgb(95, 95, 95),
  rgb(95, 95, 135),
  rgb(95, 95, 175),
  rgb(95, 95, 215),
  rgb(95, 95, 255),
  rgb(95, 135, 0),
  rgb(95, 135, 95),
  rgb(95, 135, 135),
  rgb(95, 135, 175),
  rgb(95, 135, 215),
  rgb(95, 135, 255),
  rgb(95, 175, 0),
  rgb(95, 175, 95),
  rgb(95, 175, 135),
  rgb(95, 175, 175),
  rgb(95, 175, 215),
  rgb(95, 175, 255),
  rgb(95, 215, 0),
  rgb(95, 215, 95),
  rgb(95, 215, 135),
  rgb(95, 215, 175),
  rgb(95, 215, 215),
  rgb(95, 215, 255),
  rgb(95, 255, 0),
  rgb(95, 255, 95),
  rgb(95, 255, 135),
  rgb(95, 255, 175),
  rgb(95, 255, 215),
  rgb(95, 255, 255),
  rgb(135, 0, 0),
  rgb(135, 0, 95),
  rgb(135, 0, 135),
  rgb(135, 0, 175),
  rgb(135, 0, 215),
  rgb(135, 0, 255),
  rgb(135, 95, 0),
  rgb(135, 95, 95),
  rgb(135, 95, 135),
  rgb(135, 95, 175),
  rgb(135, 95, 215),
  rgb(135, 95, 255),
  rgb(135, 135, 0),
  rgb(135, 135, 95),
  rgb(135, 135, 135),
  rgb(135, 135, 175),
  rgb(135, 135, 215),
  rgb(135, 135, 255),
  rgb(135, 175, 0),
  rgb(135, 175, 95),
  rgb(135, 175, 135),
  rgb(135, 175, 175),
  rgb(135, 175, 215),
  rgb(135, 175, 255),
  rgb(135, 215, 0),
  rgb(135, 215, 95),
  rgb(135, 215, 135),
  rgb(135, 215, 175),
  rgb(135, 215, 215),
  rgb(135, 215, 255),
  rgb(135, 255, 0),
  rgb(135, 255, 95),
  rgb(135, 255, 135),
  rgb(135, 255, 175),
  rgb(135, 255, 215),
  rgb(135, 255, 255),
  rgb(175, 0, 0),
  rgb(175, 0, 95),
  rgb(175, 0, 135),
  rgb(175, 0, 175),
  rgb(175, 0, 215),
  rgb(175, 0, 255),
  rgb(175, 95, 0),
  rgb(175, 95, 95),
  rgb(175, 95, 135),
  rgb(175, 95, 175),
  rgb(175, 95, 215),
  rgb(175, 95, 255),
  rgb(175, 135, 0),
  rgb(175, 135, 95),
  rgb(175, 135, 135),
  rgb(175, 135, 175),
  rgb(175, 135, 215),
  rgb(175, 135, 255),
  rgb(175, 175, 0),
  rgb(175, 175, 95),
  rgb(175, 175, 135),
  rgb(175, 175, 175),
  rgb(175, 175, 215),
  rgb(175, 175, 255),
  rgb(175, 215, 0),
  rgb(175, 215, 95),
  rgb(175, 215, 135),
  rgb(175, 215, 175),
  rgb(175, 215, 215),
  rgb(175, 215, 255),
  rgb(175, 255, 0),
  rgb(175, 255, 95),
  rgb(175, 255, 135),
  rgb(175, 255, 175),
  rgb(175, 255, 215),
  rgb(175, 255, 255),
  rgb(215, 0, 0),
  rgb(215, 0, 95),
  rgb(215, 0, 135),
  rgb(215, 0, 175),
  rgb(215, 0, 215),
  rgb(215, 0, 255),
  rgb(215, 95, 0),
  rgb(215, 95, 95),
  rgb(215, 95, 135),
  rgb(215, 95, 175),
  rgb(215, 95, 215),
  rgb(215, 95, 255),
  rgb(215, 135, 0),
  rgb(215, 135, 95),
  rgb(215, 135, 135),
  rgb(215, 135, 175),
  rgb(215, 135, 215),
  rgb(215, 135, 255),
  rgb(215, 175, 0),
  rgb(215, 175, 95),
  rgb(215, 175, 135),
  rgb(215, 175, 175),
  rgb(215, 175, 215),
  rgb(215, 175, 255),
  rgb(215, 215, 0),
  rgb(215, 215, 95),
  rgb(215, 215, 135),
  rgb(215, 215, 175),
  rgb(215, 215, 215),
  rgb(215, 215, 255),
  rgb(215, 255, 0),
  rgb(215, 255, 95),
  rgb(215, 255, 135),
  rgb(215, 255, 175),
  rgb(215, 255, 215),
  rgb(215, 255, 255),
  rgb(255, 0, 0),
  rgb(255, 0, 95),
  rgb(255, 0, 135),
  rgb(255, 0, 175),
  rgb(255, 0, 215),
  rgb(255, 0, 255),
  rgb(255, 95, 0),
  rgb(255, 95, 95),
  rgb(255, 95, 135),
  rgb(255, 95, 175),
  rgb(255, 95, 215),
  rgb(255, 95, 255),
  rgb(255, 135, 0),
  rgb(255, 135, 95),
  rgb(255, 135, 135),
  rgb(255, 135, 175),
  rgb(255, 135, 215),
  rgb(255, 135, 255),
  rgb(255, 175, 0),
  rgb(255, 175, 95),
  rgb(255, 175, 135),
  rgb(255, 175, 175),
  rgb(255, 175, 215),
  rgb(255, 175, 255),
  rgb(255, 215, 0),
  rgb(255, 215, 95),
  rgb(255, 215, 135),
  rgb(255, 215, 175),
  rgb(255, 215, 215),
  rgb(255, 215, 255),
  rgb(255, 255, 0),
  rgb(255, 255, 95),
  rgb(255, 255, 135),
  rgb(255, 255, 175),
  rgb(255, 255, 215),
  rgb(255, 255, 255),
  rgb(8, 8, 8),
  rgb(18, 18, 18),
  rgb(28, 28, 28),
  rgb(38, 38, 38),
  rgb(48, 48, 48),
  rgb(58, 58, 58),
  rgb(68, 68, 68),
  rgb(78, 78, 78),
  rgb(88, 88, 88),
  rgb(98, 98, 98),
  rgb(108, 108, 108),
  rgb(118, 118, 118),
  rgb(128, 128, 128),
  rgb(138, 138, 138),
  rgb(148, 148, 148),
  rgb(158, 158, 158),
  rgb(168, 168, 168),
  rgb(178, 178, 178),
  rgb(188, 188, 188),
  rgb(198, 198, 198),
  rgb(208, 208, 208),
  rgb(218, 218, 218),
  rgb(228, 228, 228),
  rgb(238, 238, 238),
];

export const BLACK_WHITE_PALETTE = [rgb(0, 0, 0), rgb(255, 255, 255)];
